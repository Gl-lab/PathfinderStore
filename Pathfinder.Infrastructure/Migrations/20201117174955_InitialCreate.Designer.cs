// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pathfinder.Infrastructure.Data;

namespace Pathfinder.Infrastructure.Migrations
{
    [DbContext(typeof(PgDbContext))]
    [Migration("20201117174955_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Pathfinder.Core.Entities.Account.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Account.Backpack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<bool>("IsWearable")
                        .HasColumnType("boolean");

                    b.Property<int?>("ItemId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ItemId");

                    b.ToTable("Backpack");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Account.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer");

                    b.Property<int>("Balance")
                        .HasColumnType("integer");

                    b.Property<int?>("CharacteristicsId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("RaceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CharacteristicsId");

                    b.HasIndex("RaceId");

                    b.ToTable("Character");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Account.Characteristic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("CharacteristicInfoId")
                        .HasColumnType("integer");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CharacteristicInfoId");

                    b.ToTable("Characteristic");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Account.CharacteristicInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CharacteristicInfo");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Account.GroupCharacteristic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("CharismaId")
                        .HasColumnType("integer");

                    b.Property<int?>("ConstitutionId")
                        .HasColumnType("integer");

                    b.Property<int?>("DexterityId")
                        .HasColumnType("integer");

                    b.Property<int?>("IntelligenceId")
                        .HasColumnType("integer");

                    b.Property<int?>("StrengthId")
                        .HasColumnType("integer");

                    b.Property<int?>("WisdomId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CharismaId");

                    b.HasIndex("ConstitutionId");

                    b.HasIndex("DexterityId");

                    b.HasIndex("IntelligenceId");

                    b.HasIndex("StrengthId");

                    b.HasIndex("WisdomId");

                    b.ToTable("GroupCharacteristic");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Account.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("BaseSpeed")
                        .HasColumnType("integer");

                    b.Property<bool>("HaveNigthVision")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("SizeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SizeId");

                    b.ToTable("Race");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Account.RaceSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RaceSize");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Auth.Permissions.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a1ccb43-fa4f-48ce-b601-d3ab4d611b32"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Administration access",
                            ModificationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Permissions_Administration"
                        },
                        new
                        {
                            Id = new Guid("28126ffd-51c2-4201-939c-b64e3df43b9d"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Member access",
                            ModificationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Permissions_Member_Access"
                        },
                        new
                        {
                            Id = new Guid("86d804bd-d022-49a5-821a-d2240478aac4"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "User read",
                            ModificationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Permissions_User_Read"
                        },
                        new
                        {
                            Id = new Guid("8f3de3ec-3851-4ba9-887a-2119f18ae744"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "User create",
                            ModificationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Permissions_User_Create"
                        },
                        new
                        {
                            Id = new Guid("068a0171-a141-4eb2-854c-88e43ef9ab7f"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "User update",
                            ModificationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Permissions_User_Update"
                        },
                        new
                        {
                            Id = new Guid("70b5c5c3-2267-4f7c-b0f9-7ecc952e04a6"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "User delete",
                            ModificationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Permissions_User_Delete"
                        },
                        new
                        {
                            Id = new Guid("80562f50-8a7d-4bcd-8971-6d856bbcbb7f"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Role read",
                            ModificationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Permissions_Role_Read"
                        },
                        new
                        {
                            Id = new Guid("d4d7c0e3-efcf-4dd2-86e7-17d69fda8c75"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Role create",
                            ModificationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Permissions_Role_Create"
                        },
                        new
                        {
                            Id = new Guid("ea003a99-4755-4c19-b126-c5cffbc65088"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Role update",
                            ModificationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Permissions_Role_Update"
                        },
                        new
                        {
                            Id = new Guid("8f76de0b-114a-4df8-a93d-cec927d06a3c"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Role delete",
                            ModificationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Permissions_Role_Delete"
                        });
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Auth.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<bool>("IsSystemDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f22bce18-06ec-474a-b9af-a9de2a7b8263"),
                            ConcurrencyStamp = "d06f9c83-c5be-4476-9312-328107c92222",
                            IsSystemDefault = true,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("11d14a89-3a93-4d39-a94f-82b823f0d4ce"),
                            ConcurrencyStamp = "e81fb60f-b088-4558-89b0-0d1417ddf574",
                            IsSystemDefault = true,
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Auth.Roles.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Auth.Roles.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermission");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("f22bce18-06ec-474a-b9af-a9de2a7b8263"),
                            PermissionId = new Guid("2a1ccb43-fa4f-48ce-b601-d3ab4d611b32")
                        },
                        new
                        {
                            RoleId = new Guid("f22bce18-06ec-474a-b9af-a9de2a7b8263"),
                            PermissionId = new Guid("28126ffd-51c2-4201-939c-b64e3df43b9d")
                        },
                        new
                        {
                            RoleId = new Guid("f22bce18-06ec-474a-b9af-a9de2a7b8263"),
                            PermissionId = new Guid("86d804bd-d022-49a5-821a-d2240478aac4")
                        },
                        new
                        {
                            RoleId = new Guid("f22bce18-06ec-474a-b9af-a9de2a7b8263"),
                            PermissionId = new Guid("8f3de3ec-3851-4ba9-887a-2119f18ae744")
                        },
                        new
                        {
                            RoleId = new Guid("f22bce18-06ec-474a-b9af-a9de2a7b8263"),
                            PermissionId = new Guid("068a0171-a141-4eb2-854c-88e43ef9ab7f")
                        },
                        new
                        {
                            RoleId = new Guid("f22bce18-06ec-474a-b9af-a9de2a7b8263"),
                            PermissionId = new Guid("70b5c5c3-2267-4f7c-b0f9-7ecc952e04a6")
                        },
                        new
                        {
                            RoleId = new Guid("f22bce18-06ec-474a-b9af-a9de2a7b8263"),
                            PermissionId = new Guid("80562f50-8a7d-4bcd-8971-6d856bbcbb7f")
                        },
                        new
                        {
                            RoleId = new Guid("f22bce18-06ec-474a-b9af-a9de2a7b8263"),
                            PermissionId = new Guid("d4d7c0e3-efcf-4dd2-86e7-17d69fda8c75")
                        },
                        new
                        {
                            RoleId = new Guid("f22bce18-06ec-474a-b9af-a9de2a7b8263"),
                            PermissionId = new Guid("ea003a99-4755-4c19-b126-c5cffbc65088")
                        },
                        new
                        {
                            RoleId = new Guid("f22bce18-06ec-474a-b9af-a9de2a7b8263"),
                            PermissionId = new Guid("8f76de0b-114a-4df8-a93d-cec927d06a3c")
                        },
                        new
                        {
                            RoleId = new Guid("11d14a89-3a93-4d39-a94f-82b823f0d4ce"),
                            PermissionId = new Guid("28126ffd-51c2-4201-939c-b64e3df43b9d")
                        });
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Auth.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c41a7761-6645-4e2c-b99d-f9e767b9ac77"),
                            AccessFailedCount = 5,
                            ConcurrencyStamp = "9aaf4656-e943-4b0a-bddf-f0eeea314894",
                            Email = "admin@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEPZ85aLX3oCrOfmyD5aQWLzR2F53RxX0ko4ManWsiPXnbeKcL3YMOIKANLWsukGMzw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("065e903e-6f7b-42b8-b807-0c4197f9d1bc"),
                            AccessFailedCount = 5,
                            ConcurrencyStamp = "e4bc690e-195a-44bf-93a6-b8619777e084",
                            Email = "memberuser@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MEMBERUSER@MAIL.COM",
                            NormalizedUserName = "MEMBERUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEPZ85aLX3oCrOfmyD5aQWLzR2F53RxX0ko4ManWsiPXnbeKcL3YMOIKANLWsukGMzw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "memberuser"
                        },
                        new
                        {
                            Id = new Guid("4b6d9e45-626d-489a-a8cf-d32d36583af4"),
                            AccessFailedCount = 5,
                            ConcurrencyStamp = "01000ec8-3510-44a1-9196-1583b43e9b62",
                            Email = "testadmin@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TESTADMIN@MAIL.COM",
                            NormalizedUserName = "TESTADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEPZ85aLX3oCrOfmyD5aQWLzR2F53RxX0ko4ManWsiPXnbeKcL3YMOIKANLWsukGMzw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "testadmin"
                        });
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Auth.Users.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Auth.Users.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Auth.Users.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("c41a7761-6645-4e2c-b99d-f9e767b9ac77"),
                            RoleId = new Guid("f22bce18-06ec-474a-b9af-a9de2a7b8263")
                        },
                        new
                        {
                            UserId = new Guid("4b6d9e45-626d-489a-a8cf-d32d36583af4"),
                            RoleId = new Guid("f22bce18-06ec-474a-b9af-a9de2a7b8263")
                        },
                        new
                        {
                            UserId = new Guid("065e903e-6f7b-42b8-b807-0c4197f9d1bc"),
                            RoleId = new Guid("11d14a89-3a93-4d39-a94f-82b823f0d4ce")
                        });
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Auth.Users.UserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Product.Ammunition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Ammunition");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Product.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageFile")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("ArticleList");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Product.BaseDice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("D")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("BaseDice");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Product.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.HasKey("Id");

                    b.ToTable("CategoryList");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Product.DamageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.Property<int?>("WeaponId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WeaponId");

                    b.ToTable("DamageTypeList");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Product.Dices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<int?>("DId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DId");

                    b.ToTable("Dices");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Product.Effect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("ArticleId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("Effect");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Product.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("ArticleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Product.Weapon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("AmmunitionId")
                        .HasColumnType("integer");

                    b.Property<int>("ArticleId")
                        .HasColumnType("integer");

                    b.Property<int>("CritRange")
                        .HasColumnType("integer");

                    b.Property<int?>("LargeSizeDamageId")
                        .HasColumnType("integer");

                    b.Property<int?>("MediumSizeDamageId")
                        .HasColumnType("integer");

                    b.Property<int>("MultiplierCrit")
                        .HasColumnType("integer");

                    b.Property<int?>("Range")
                        .HasColumnType("integer");

                    b.Property<int?>("SmallSizeDamageId")
                        .HasColumnType("integer");

                    b.Property<int?>("WeaponTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AmmunitionId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("LargeSizeDamageId");

                    b.HasIndex("MediumSizeDamageId");

                    b.HasIndex("SmallSizeDamageId");

                    b.HasIndex("WeaponTypeId");

                    b.ToTable("WeaponList");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Product.WeaponItemProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("IsMasterful")
                        .HasColumnType("boolean");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.Property<int?>("WeaponId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WeaponId");

                    b.ToTable("WeaponItemProperty");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Product.WeaponType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WeaponTypeList");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Shop.Shop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Shop.ShopsProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<int?>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int?>("ShopId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("ShopId");

                    b.ToTable("ShopsProducts");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Account.Account", b =>
                {
                    b.HasOne("Pathfinder.Core.Entities.Auth.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Account.Backpack", b =>
                {
                    b.HasOne("Pathfinder.Core.Entities.Account.Character", "Character")
                        .WithMany("Items")
                        .HasForeignKey("CharacterId");

                    b.HasOne("Pathfinder.Core.Entities.Product.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.Navigation("Character");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Account.Character", b =>
                {
                    b.HasOne("Pathfinder.Core.Entities.Account.Account", null)
                        .WithMany("Characters")
                        .HasForeignKey("AccountId");

                    b.HasOne("Pathfinder.Core.Entities.Account.GroupCharacteristic", "Characteristics")
                        .WithMany()
                        .HasForeignKey("CharacteristicsId");

                    b.HasOne("Pathfinder.Core.Entities.Account.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId");

                    b.Navigation("Characteristics");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Account.Characteristic", b =>
                {
                    b.HasOne("Pathfinder.Core.Entities.Account.CharacteristicInfo", "CharacteristicInfo")
                        .WithMany()
                        .HasForeignKey("CharacteristicInfoId");

                    b.Navigation("CharacteristicInfo");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Account.GroupCharacteristic", b =>
                {
                    b.HasOne("Pathfinder.Core.Entities.Account.Characteristic", "Charisma")
                        .WithMany()
                        .HasForeignKey("CharismaId");

                    b.HasOne("Pathfinder.Core.Entities.Account.Characteristic", "Constitution")
                        .WithMany()
                        .HasForeignKey("ConstitutionId");

                    b.HasOne("Pathfinder.Core.Entities.Account.Characteristic", "Dexterity")
                        .WithMany()
                        .HasForeignKey("DexterityId");

                    b.HasOne("Pathfinder.Core.Entities.Account.Characteristic", "Intelligence")
                        .WithMany()
                        .HasForeignKey("IntelligenceId");

                    b.HasOne("Pathfinder.Core.Entities.Account.Characteristic", "Strength")
                        .WithMany()
                        .HasForeignKey("StrengthId");

                    b.HasOne("Pathfinder.Core.Entities.Account.Characteristic", "Wisdom")
                        .WithMany()
                        .HasForeignKey("WisdomId");

                    b.Navigation("Charisma");

                    b.Navigation("Constitution");

                    b.Navigation("Dexterity");

                    b.Navigation("Intelligence");

                    b.Navigation("Strength");

                    b.Navigation("Wisdom");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Account.Race", b =>
                {
                    b.HasOne("Pathfinder.Core.Entities.Account.RaceSize", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Auth.Roles.RoleClaim", b =>
                {
                    b.HasOne("Pathfinder.Core.Entities.Auth.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Auth.Roles.RolePermission", b =>
                {
                    b.HasOne("Pathfinder.Core.Entities.Auth.Permissions.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pathfinder.Core.Entities.Auth.Roles.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Auth.Users.UserClaim", b =>
                {
                    b.HasOne("Pathfinder.Core.Entities.Auth.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Auth.Users.UserLogin", b =>
                {
                    b.HasOne("Pathfinder.Core.Entities.Auth.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Auth.Users.UserRole", b =>
                {
                    b.HasOne("Pathfinder.Core.Entities.Auth.Roles.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pathfinder.Core.Entities.Auth.Users.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Auth.Users.UserToken", b =>
                {
                    b.HasOne("Pathfinder.Core.Entities.Auth.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Product.Article", b =>
                {
                    b.HasOne("Pathfinder.Core.Entities.Product.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Product.DamageType", b =>
                {
                    b.HasOne("Pathfinder.Core.Entities.Product.Weapon", null)
                        .WithMany("DamageTypeList")
                        .HasForeignKey("WeaponId");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Product.Dices", b =>
                {
                    b.HasOne("Pathfinder.Core.Entities.Product.BaseDice", "D")
                        .WithMany()
                        .HasForeignKey("DId");

                    b.Navigation("D");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Product.Effect", b =>
                {
                    b.HasOne("Pathfinder.Core.Entities.Product.Article", null)
                        .WithMany("Effects")
                        .HasForeignKey("ArticleId");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Product.Item", b =>
                {
                    b.HasOne("Pathfinder.Core.Entities.Product.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId");

                    b.Navigation("Article");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Product.Weapon", b =>
                {
                    b.HasOne("Pathfinder.Core.Entities.Product.Ammunition", "Ammunition")
                        .WithMany()
                        .HasForeignKey("AmmunitionId");

                    b.HasOne("Pathfinder.Core.Entities.Product.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pathfinder.Core.Entities.Product.Dices", "LargeSizeDamage")
                        .WithMany()
                        .HasForeignKey("LargeSizeDamageId");

                    b.HasOne("Pathfinder.Core.Entities.Product.Dices", "MediumSizeDamage")
                        .WithMany()
                        .HasForeignKey("MediumSizeDamageId");

                    b.HasOne("Pathfinder.Core.Entities.Product.Dices", "SmallSizeDamage")
                        .WithMany()
                        .HasForeignKey("SmallSizeDamageId");

                    b.HasOne("Pathfinder.Core.Entities.Product.WeaponType", "WeaponType")
                        .WithMany()
                        .HasForeignKey("WeaponTypeId");

                    b.Navigation("Ammunition");

                    b.Navigation("Article");

                    b.Navigation("LargeSizeDamage");

                    b.Navigation("MediumSizeDamage");

                    b.Navigation("SmallSizeDamage");

                    b.Navigation("WeaponType");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Product.WeaponItemProperty", b =>
                {
                    b.HasOne("Pathfinder.Core.Entities.Product.Item", "Weapon")
                        .WithMany()
                        .HasForeignKey("WeaponId");

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Shop.ShopsProduct", b =>
                {
                    b.HasOne("Pathfinder.Core.Entities.Product.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.HasOne("Pathfinder.Core.Entities.Shop.Shop", "Shop")
                        .WithMany()
                        .HasForeignKey("ShopId");

                    b.Navigation("Item");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Account.Account", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Account.Character", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Auth.Permissions.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Auth.Roles.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Auth.Users.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Product.Article", b =>
                {
                    b.Navigation("Effects");
                });

            modelBuilder.Entity("Pathfinder.Core.Entities.Product.Weapon", b =>
                {
                    b.Navigation("DamageTypeList");
                });
#pragma warning restore 612, 618
        }
    }
}
